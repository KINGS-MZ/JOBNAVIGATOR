rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Admin rules - allow admins to access everything
    function isAdmin() {
      return request.auth != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Allow admins to access all collections
    match /{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Match any document in the 'users' collection
    match /users/{userId} {
      allow read;
      // Allow write if it's your own document or you're an admin
      allow write: if request.auth != null && (request.auth.uid == userId || isAdmin());
      
      // Special function for follow requests
      function isFollowRelatedUpdate() {
        // Check if the operation is modifying followers, following, or pendingFollowRequests arrays only
        let incomingData = request.resource.data;
        let existingData = resource.data;
        
        let allowedFields = ['followers', 'following', 'pendingFollowRequests'];
        let changedFields = incomingData.diff(existingData).affectedKeys();
        
        return changedFields.hasOnly(allowedFields);
      }
      
      // Allow other users to update follow-related fields
      allow update: if request.auth != null && isFollowRelatedUpdate();
      
      // Allow access to analytics subcollection
      match /analytics/{documentId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Allow access to subcollections of users - FIXED: Allow any authenticated user to create chats
      match /chats/{chatId} {
        allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
        allow create: if request.auth != null; // Allow any authenticated user to create chat references
        allow update, delete: if request.auth != null && (request.auth.uid == userId || isAdmin());
      }
      
      // Add rules for archived chats
      match /archivedChats/{chatId} {
        allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin());
      }
      
      // Add rules for blocked users
      match /blockedUsers/{blockedId} {
        allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin());
      }

      // Allow access to savedJobs subcollection
      match /savedJobs/{jobId} {
        allow read, write: if request.auth != null || isAdmin();
      }
      
      // Allow access to savedItems subcollection
      match /savedItems/{itemId} {
        allow read, write: if request.auth != null || isAdmin();
      }
      
      // Allow access to notifications subcollection
      match /notifications/{notificationId} {
        // Users can read/write their own notifications
        allow read, write: if request.auth != null && request.auth.uid == userId;
        
        // Users can create notifications for other users (for follow requests, etc.)
        allow create: if request.auth != null;
      }
    }
    
    // Match any document in the 'chats' collection
    match /chats/{chatId} {
      // CRITICAL FIX: Allow list queries on entire collection
      allow list: if request.auth != null;
      
      // FIXED: More flexible chat creation rules
      allow create: if request.auth != null && 
                    request.auth.uid in request.resource.data.participants;
      
      // FIXED: Add flexible access during initialization               
      allow read, update, delete: if request.auth != null && 
                     (resource.data.participants.hasAny([request.auth.uid]) || isAdmin());
      
      // Messages subcollection - FIXED RULES
      match /messages/{messageId} {
        // Allow reading messages if the user is a chat participant
        allow read: if request.auth != null && 
                    get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        
        // Allow creating messages if the user is a chat participant
        allow create: if request.auth != null && 
                      get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        
        // Allow updating messages if user is either the sender OR
        // if they're only updating the read field and they're a participant
        allow update: if request.auth != null && 
                      (
                        // If sender is updating their own message
                        (resource.data.senderId == request.auth.uid)
                        ||
                        // OR if only updating the read field and is a participant
                        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']) &&
                        get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]))
                      );
        
        // Allow deleting messages if the user is the sender
        allow delete: if request.auth != null && 
                      resource.data.senderId == request.auth.uid;
      }
      
      // Typing indicators - participants can read and write
      match /typing/{userId} {
        // Users can indicate their own typing status and read others
        allow read: if request.auth != null && 
                    get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        
        // Only allow users to update their own typing status
        allow write: if request.auth != null && 
                     request.auth.uid == userId && 
                     get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      }
    }

    // Subscriptions collection rules
    match /subscriptions/{subscriptionId} {
      // Allow all authenticated users to read subscriptions
      allow read: if request.auth != null;
      // Only allow users to write to their own subscription documents
      allow write: if request.auth != null && 
                   request.resource.data.userId == request.auth.uid || 
                   isAdmin();
    }

    // Jobs collection
    match /jobs/{jobId} {
      allow read; // Everyone can read jobs
      allow create, update, delete: if request.auth != null || isAdmin(); // Only authenticated users can modify
      
      // Allow access to saved status subcollection inside jobs
      match /saved/{userId} {
        allow read, write: if request.auth != null || isAdmin();
      }
    }
    
    // Saved jobs collection (if using a separate collection)
    match /savedJobs/{document=**} {
      allow read, write: if request.auth != null || isAdmin();
    }
    
    // Alternative saved jobs collection with other structure
    match /saved/{userId}/{jobId} {
      allow read, write: if request.auth != null || isAdmin();
    }
    
    // Status collection for real-time presence
    match /status/{userId} {
      allow read: if request.auth != null || isAdmin();
      allow write: if request.auth != null && request.auth.uid == userId || isAdmin();
    }
    
    // Explicit rules for admin-specific collections
    match /messages/{messageId} {
      allow read, write: if isAdmin();
    }
    
    match /posts/{postId} {
      allow read; // Everyone can read posts
      allow write: if request.auth != null && request.auth.uid == resource.data.authorId || isAdmin();
    }
    
    match /activityLogs/{logId} {
      allow read, write: if isAdmin();
    }
    
    match /siteSettings/{settingId} {
      allow read;
      allow write: if isAdmin();
    }
  }
} 
// Firebase Security Rules for Job Navigator App
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Match any document in the 'users' collection
    match /users/{userId} {
      allow read;
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Allow access to subcollections of users
      match /chats/{chatId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Match any document in the 'chats' collection
    match /chats/{chatId} {
      // Allow access if the authenticated user is a participant in the chat
      allow read: if request.auth != null && 
                  request.auth.uid in resource.data.participants;
      
      // Allow creation of new chats
      allow create: if request.auth != null && 
                    request.auth.uid in request.resource.data.participants;
      
      // Allow updates if the user is a participant
      allow update: if request.auth != null && 
                    request.auth.uid in resource.data.participants;
      
      // Messages subcollection
      match /messages/{messageId} {
        // Allow reading messages if the user is a chat participant
        allow read: if request.auth != null && 
                    get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        
        // Allow creating messages if the user is a chat participant
        allow create: if request.auth != null && 
                      get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        
        // Allow updating messages if user is either the sender OR
        // if they're only updating the read field and they're a participant
        allow update: if request.auth != null && 
                      (
                        // If sender is updating their own message
                        (resource.data.senderId == request.auth.uid &&
                        get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]))
                        ||
                        // OR if only updating the read field and is a participant
                        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']) &&
                        resource.data.senderId != request.auth.uid &&
                        get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]))
                      );
        
        // Allow deleting messages if the user is the sender
        allow delete: if request.auth != null && 
                      resource.data.senderId == request.auth.uid &&
                      get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      }
      
      // Typing indicators - participants can read and write
      match /typing/{userId} {
        // Users can indicate their own typing status and read others
        allow read: if request.auth != null && 
                    get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        
        // Only allow users to update their own typing status
        allow write: if request.auth != null && 
                     request.auth.uid == userId && 
                     get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      }
    }
    
    // Status collection for real-time presence
    match /status/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
}

// Realtime Database Rules
{
  "rules": {
    ".read": "auth != null",
    ".write": "auth != null",
    "status": {
      "$uid": {
        ".read": "auth != null",
        ".write": "auth != null && auth.uid == $uid"
      }
    },
    "typing": {
      "$chatId": {
        "$uid": {
          ".read": "auth != null",
          ".write": "auth != null && auth.uid === $uid"
        }
      }
    }
  }
} 